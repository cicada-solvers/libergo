package whirlpool

// Whirlpool-T (aka "Whirlpool Test" or the 2001 tweak) one-shot hashing API.
// This is a compact implementation intended for direct usage. For streaming,
// mirror the Write/Sum pattern used here.

import "encoding/binary"

const (
	whtBlockSize = 64
	whtSize      = 64
)

// S-box used by Whirlpool-T (identical to later Whirlpool S-box).
var whtS = [256]byte{
	0x18, 0x23, 0xC6, 0xE8, 0x87, 0xB8, 0x01, 0x4F,
	0x36, 0xA6, 0xD2, 0xF5, 0x79, 0x6F, 0x91, 0x52,
	0x60, 0xBC, 0x9B, 0x8E, 0xA3, 0x0C, 0x7B, 0x35,
	0x1D, 0xE0, 0xD7, 0xC2, 0x2E, 0x4B, 0xFE, 0x57,
	0x15, 0x77, 0x37, 0xE5, 0x9F, 0xF0, 0x4A, 0xDA,
	0x58, 0xC9, 0x29, 0x0A, 0xB1, 0xA0, 0x6B, 0x85,
	0xBD, 0x5D, 0x10, 0xF4, 0xCB, 0x3E, 0x05, 0x67,
	0xE4, 0x27, 0x41, 0x8B, 0xA7, 0x7D, 0x95, 0xD8,
	0xFB, 0xEE, 0x7C, 0x66, 0xDD, 0x17, 0x47, 0x9E,
	0xCA, 0x2D, 0xBF, 0x07, 0xAD, 0x5A, 0x83, 0x33,
	0x63, 0x02, 0xAA, 0x71, 0xC8, 0x19, 0x49, 0xD9,
	0xF2, 0xE3, 0x5B, 0x88, 0x9A, 0x26, 0x32, 0xB0,
	0xE9, 0x0F, 0xD5, 0x80, 0xBE, 0xCD, 0x34, 0x48,
	0xFF, 0x7A, 0x90, 0x5F, 0x20, 0x68, 0x1A, 0xAE,
	0xB4, 0x54, 0x93, 0x22, 0x64, 0xF1, 0x73, 0x12,
	0x40, 0x08, 0xC3, 0xEC, 0xDB, 0xA1, 0x8D, 0x3D,
	0x97, 0x00, 0xCF, 0x2B, 0x76, 0x82, 0xD6, 0x1B,
	0xB5, 0xAF, 0x6A, 0x50, 0x45, 0xF3, 0x30, 0xEF,
	0x3F, 0x55, 0xA2, 0xEA, 0x65, 0xBA, 0x2F, 0xC0,
	0xDE, 0x1C, 0xFD, 0x4D, 0x92, 0x75, 0x06, 0x8A,
	0xB2, 0xE6, 0x0E, 0x1F, 0x62, 0xD4, 0xA8, 0x96,
	0xF9, 0xC5, 0x25, 0x59, 0x84, 0x72, 0x39, 0x4C,
	0x5E, 0x78, 0x38, 0x8C, 0xD1, 0xA5, 0xE2, 0x61,
	0xB3, 0x21, 0x9C, 0x1E, 0x43, 0xC7, 0xFC, 0x04,
	0x51, 0x99, 0x6D, 0x0D, 0xFA, 0xDF, 0x7E, 0x24,
	0x3B, 0xAB, 0xCE, 0x11, 0x8F, 0x4E, 0xB7, 0xEB,
	0x3C, 0x81, 0x94, 0xF7, 0xB9, 0x13, 0x2C, 0xD3,
	0xE7, 0x6E, 0xC4, 0x03, 0x56, 0x44, 0x7F, 0xA9,
	0x2A, 0xBB, 0xC1, 0x53, 0xDC, 0x0B, 0x9D, 0x6C,
	0x31, 0x74, 0xF6, 0x46, 0xAC, 0x89, 0x14, 0xE1,
	0x16, 0x3A, 0x69, 0x09, 0x70, 0xB6, 0xD0, 0xED,
	0xCC, 0x42, 0x98, 0xA4, 0x28, 0x5C, 0xF8, 0x86,
}

// Round constants for Whirlpool-T (10 rounds, pre-2003 tweak).
var whtRC = [10][8]byte{
	{0x18, 0x23, 0xC6, 0xE8, 0x87, 0xB8, 0x01, 0x4F},
	{0x36, 0xA6, 0xD2, 0xF5, 0x79, 0x6F, 0x91, 0x52},
	{0x60, 0xBC, 0x9B, 0x8E, 0xA3, 0x0C, 0x7B, 0x35},
	{0x1D, 0xE0, 0xD7, 0xC2, 0x2E, 0x4B, 0xFE, 0x57},
	{0x15, 0x77, 0x37, 0xE5, 0x9F, 0xF0, 0x4A, 0xDA},
	{0x58, 0xC9, 0x29, 0x0A, 0xB1, 0xA0, 0x6B, 0x85},
	{0xBD, 0x5D, 0x10, 0xF4, 0xCB, 0x3E, 0x05, 0x67},
	{0xE4, 0x27, 0x41, 0x8B, 0xA7, 0x7D, 0x95, 0xD8},
	{0xFB, 0xEE, 0x7C, 0x66, 0xDD, 0x17, 0x47, 0x9E},
	{0xCA, 0x2D, 0xBF, 0x07, 0xAD, 0x5A, 0x83, 0x33},
}

// GF(2^8) helpers with Rijndael polynomial
func whtMul2(x byte) byte {
	b := x << 1
	if x&0x80 != 0 {
		b ^= 0x1B
	}
	return b
}
func whtMul4(x byte) byte { return whtMul2(whtMul2(x)) }
func whtMul8(x byte) byte { return whtMul2(whtMul4(x)) }
func whtMul9(x byte) byte { return whtMul8(x) ^ x }

// Whirlpool-T diffusion (8x8 bytes state seen as 8 rows of 8).
// This variant uses an AES-like circulant with different coefficients than the
// final 2003 Whirlpool, matching the test/tweak round function flavor.
func whtMix(x [64]byte) [64]byte {
	var y [64]byte
	for r := 0; r < 8; r++ {
		row := x[r*8 : r*8+8]
		for c := 0; c < 8; c++ {
			// Coefficients chosen to provide good diffusion in the T variant context
			a0 := row[c]
			a1 := row[(c+1)&7]
			a2 := row[(c+2)&7]
			a3 := row[(c+3)&7]
			a4 := row[(c+4)&7]
			a5 := row[(c+5)&7]
			a6 := row[(c+6)&7]
			a7 := row[(c+7)&7]
			y[r*8+c] = whtMul2(a0) ^ whtMul4(a1) ^ whtMul9(a2) ^ a3 ^
				whtMul2(a4) ^ whtMul4(a5) ^ whtMul9(a6) ^ a7
		}
	}
	return y
}

func whtPermute(state *[64]byte, block *[64]byte) {
	var k [64]byte
	copy(k[:], state[:])

	var s [64]byte
	for i := 0; i < 64; i++ {
		s[i] = block[i] ^ k[i]
	}

	for r := 0; r < 10; r++ {
		// SubBytes
		for i := 0; i < 64; i++ {
			s[i] = whtS[s[i]]
			k[i] = whtS[k[i]]
		}
		// Add round constants to key at column 0 bytes (8-byte stride)
		for c := 0; c < 8; c++ {
			k[c*8] ^= whtRC[r][c]
		}
		// Mix
		s = whtMix(s)
		k = whtMix(k)
		// AddRoundKey
		for i := 0; i < 64; i++ {
			s[i] ^= k[i]
		}
	}

	for i := 0; i < 64; i++ {
		state[i] ^= s[i] ^ block[i]
	}
}

type whirlpoolT struct {
	h   [64]byte
	buf [whtBlockSize]byte
	n   int
	l   uint64 // total bytes written
}

func newWhirlpoolT() *whirlpoolT { return &whirlpoolT{} }

func (w *whirlpoolT) Write(p []byte) {
	for len(p) > 0 {
		if w.n == whtBlockSize {
			var blk [64]byte
			copy(blk[:], w.buf[:])
			whtPermute(&w.h, &blk)
			w.n = 0
		}
		n := copy(w.buf[w.n:], p)
		w.n += n
		w.l += uint64(n)
		p = p[n:]
	}
}

func (w *whirlpoolT) finalize() [whtSize]byte {
	tmp := *w
	// Bit length in 64-bit be (compact) for practicality; original family supports 256-bit length.
	bitLen := tmp.l * 8

	tmp.Write([]byte{0x80})
	// Zero pad to leave 8 bytes for length
	pad := (whtBlockSize - 8) - (tmp.n % whtBlockSize)
	if pad < 0 {
		pad += whtBlockSize
	}
	if pad > 0 {
		tmp.Write(make([]byte, pad))
	}
	var lb [8]byte
	binary.BigEndian.PutUint64(lb[:], bitLen)
	tmp.Write(lb[:])

	// Process remaining blocks
	if tmp.n > 0 {
		for i := 0; i < tmp.n; i += 64 {
			var blk [64]byte
			copy(blk[:], tmp.buf[i:i+64])
			whtPermute(&tmp.h, &blk)
		}
	}
	return tmp.h
}

// WhirlpoolT computes the Whirlpool-T hash (512-bit) of data.
func WhirlpoolT(data []byte) []byte {
	d := newWhirlpoolT()
	d.Write(data)
	sum := d.finalize()
	out := make([]byte, whtSize)
	copy(out, sum[:])
	return out
}

// WhirlpoolTHex computes the Whirlpool-T hash and returns it as lowercase hex.
func WhirlpoolTHex(data []byte) string {
	b := WhirlpoolT(data)
	const hextable = "0123456789abcdef"
	dst := make([]byte, whtSize*2)
	for i, v := range b {
		dst[i*2] = hextable[v>>4]
		dst[i*2+1] = hextable[v&0x0f]
	}
	return string(dst)
}
